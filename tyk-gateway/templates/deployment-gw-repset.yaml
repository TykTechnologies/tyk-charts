apiVersion: apps/v1
kind: {{ .Values.gateway.kind }}
metadata:
  name: gateway-{{ include "tyk-gateway.fullname" . }}
  labels:
    app: gateway-{{ include "tyk-gateway.fullname" . }}
    chart: {{ include "tyk-gateway.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
{{- if eq .Values.gateway.kind "Deployment" }}
  replicas: {{ .Values.gateway.replicaCount }}
{{- end }}
  minReadySeconds: 5
{{- if eq .Values.gateway.kind "Deployment" }}
  strategy:
{{- else }}
  updateStrategy:
{{- end }}
{{- if ((.Values.gateway.strategy).type) }}
    type: {{ .Values.gateway.strategy.type }}
{{- else }}
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
{{- if eq .Values.gateway.kind "Deployment" }}
      maxSurge: 2
{{- end }}
      maxUnavailable: 1
{{- end }}
  selector:
    matchLabels:
      app: gateway-{{ include "tyk-gateway.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: gateway-{{ include "tyk-gateway.fullname" . }}
        release: {{ .Release.Name }}
    spec:
{{- if .Values.gateway.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.gateway.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.gateway.tolerations }}
      tolerations:
{{ toYaml .Values.gateway.tolerations | indent 8 }}
{{- end }}
{{- if .Values.gateway.affinity }}
      affinity:
{{ toYaml .Values.gateway.affinity | indent 8 }}
{{- end }}
      initContainers:
      - name: "setup-directories"
        image: busybox:1.32
        command: ['sh','-c','mkdir -p apps middleware policies && touch policies/policies.json']
        workingDir: /mnt/tyk-gateway
        volumeMounts:
          - name: tyk-scratch
            mountPath: /mnt/tyk-gateway   
      containers:
      - name: gateway-{{ .Chart.Name }}
        image: "{{ .Values.gateway.image.repository }}:{{ .Values.gateway.image.tag }}"
        imagePullPolicy: {{ .Values.gateway.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - all
        env:
          - name: TYK_GW_LISTENPORT
            value: "{{ .Values.gateway.containerPort }}"

          {{- if .Values.gateway.control.enabled }}
          - name: TYK_GW_CONTROLAPIPORT
            value: "{{ .Values.gateway.control.containerPort }}"
          {{- end }}

          # Lagacy support for Redis Cluster driver. Driver dropped in v3.0.0.
          - name: REDIGOCLUSTER_SHARDCOUNT
            value: "128"
          - name: TYK_GW_STORAGE_TYPE
            value: "redis"
          - name: TYK_GW_STORAGE_ADDRS
            value: {{ include "tyk-gateway.redis_url" . | quote }}
          {{ if .Values.global.redis.enableSentinel }}
          - name: TYK_GW_STORAGE_SENTINELPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.global.secrets.useSecretName }} {{ .Values.global.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-gateway.fullname" . }} {{ end }}
                key: redisSentinelPass
          - name: TYK_GW_STORAGE_MASTERNAME
            value: "{{- .Values.global.redis.masterName -}}"
         {{ else if .Values.global.redis.enableCluster }}
          - name: TYK_GW_STORAGE_ENABLECLUSTER
            value: "true"
         {{ else }}
          - name: TYK_GW_STORAGE_MASTERNAME
            value: ""
          - name: TYK_GW_STORAGE_ENABLECLUSTER
            value: "false"
         {{ end }}

          - name: TYK_GW_STORAGE_DATABASE
            value: "{{ default "0" .Values.global.redis.storage.database }}"
          - name: TYK_GW_STORAGE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.global.secrets.useSecretName }} {{ .Values.global.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-gateway.fullname" . }} {{ end}}
                key: redisPass
          - name: TYK_GW_STORAGE_USESSL
            value: "{{ default "false" .Values.global.redis.useSSL }}"
          - name: TYK_GW_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.global.secrets.useSecretName }} {{ .Values.global.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-gateway.fullname" . }} {{ end}}
                key: APISecret
          - name: TYK_GW_NODESECRET
            valueFrom:
              secretKeyRef:
                name: {{ if .Values.global.secrets.useSecretName }} {{ .Values.global.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-gateway.fullname" . }} {{ end}}
                key: APISecret
                
          - name: TYK_GW_HTTPSERVEROPTIONS_USESSL
            value: "{{ .Values.gateway.tls }}"
          - name: TYK_GW_TEMPLATEPATH
            value: "/opt/tyk-gateway/templates"
          - name: TYK_GW_TYKJSPATH
            value: "/opt/tyk-gateway/js/tyk.js"
          - name: TYK_GW_MIDDLEWAREPATH
            value: "/mnt/tyk-gateway/middleware"
          - name: TYK_GW_APPPATH
            value: "/mnt/tyk-gateway/apps"
          - name: TYK_GW_STORAGE_MAXIDLE
            value: "1000"
          - name: TYK_GW_OPTIMISATIONSUSEASYNCSESSIONWRITE
            value: "true"
          - name: TYK_GW_ENABLENONTRANSACTIONALRATELIMITER
            value: "true"
          - name: TYK_GW_POLICIES_POLICYSOURCE
            value: "file"
          - name: TYK_GW_POLICIES_POLICYRECORDNAME
            value: "/mnt/tyk-gateway/policies/policies.json"
          - name: TYK_GW_HASHKEYS
            value: "true"
          - name: TYK_GW_HASHKEYFUNCTION
            value: "murmur128"
          - name: TYK_GW_HTTPSERVEROPTIONS_ENABLEWEBSOCKETS
            value: "true"
          - name: TYK_GW_HTTPSERVEROPTIONS_SERVERNAME
            value: "*"
          - name: TYK_GW_HTTPSERVEROPTIONS_MINVERSION
            value: "771"
          - name: TYK_GW_HTTPSERVEROPTIONS_SSLCERTIFICATES
            value: "/etc/certs/cert.pem"
          - name: TYK_GW_ALLOWINSECURECONFIGS
            value: "true"
          - name: TYK_GW_COPROCESSOPTIONS_ENABLECOPROCESS
            value: "true"
          - name: TYK_GW_GLOBALSESSIONLIFETIME
            value: "100"
          - name: TYK_GW_MAXIDLECONNSPERHOST
            value: "500"
          - name: TYK_GW_ENABLECUSTOMDOMAINS
            value: "true"
          - name: TYK_GW_PIDFILELOCATION
            value: "/mnt/tyk-gateway/tyk.pid"


        {{- if .Values.global.components }}
        {{- if .Values.global.components.pump }}
          - name: TYK_GW_ENABLEANALYTICS
            value: "true"
        {{- end }}
        {{- end }}

        {{- if .Values.gateway.extraEnvs }}
        {{- range $env := .Values.gateway.extraEnvs }}
          - name: {{ $env.name }}
            value: {{ $env.value | quote }}
        {{- end }}
        {{- end }}
        command: ["/opt/tyk-gateway/tyk"]
        workingDir: /opt/tyk-gateway
        ports:
        - containerPort: {{ .Values.gateway.containerPort }}
        {{- if .Values.gateway.control.enabled }}
        - containerPort: {{ .Values.gateway.control.containerPort }}
        {{- end }}
        resources:
{{ toYaml .Values.gateway.resources | indent 12 }}
        volumeMounts:
          - name: {{ .Release.Name }}-default-cert
            mountPath: /etc/certs
          - name: tyk-scratch
            mountPath: /mnt/tyk-gateway
          {{- if .Values.gateway.mounts }}
          {{- range $secret := .Values.gateway.mounts }}
          - name: {{ $.Release.Name }}-gateway-secret-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}
          {{- end }}
          {{- end }}
        livenessProbe:
          httpGet:
            scheme: "HTTP{{ if .Values.gateway.tls }}S{{ end }}"
            path: /hello
            {{- if and .Values.gateway.control.enabled (or (semverCompare "^3.2.x" (include "tyk-gateway.gateway-version" . )) (semverCompare ">=3.0.4 < 3.1.0" (include "tyk-gateway.gateway-version" .))) }}
            port: {{ .Values.gateway.control.containerPort }}
            {{- else }}
            port: {{ .Values.gateway.containerPort }}
            {{- end }}
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 3
          failureThreshold: 2
        readinessProbe:
          httpGet:
            scheme: "HTTP{{ if .Values.gateway.tls }}S{{ end }}"
            path: /hello
            {{- if and .Values.gateway.control.enabled (or (semverCompare "^3.2.x" (include "tyk-gateway.gateway-version" . )) (semverCompare ">=3.0.4 < 3.1.0" (include "tyk-gateway.gateway-version" .))) }}
            port: {{ .Values.gateway.control.containerPort }}
            {{- else }}
            port: {{ .Values.gateway.containerPort }}
            {{- end }}
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
      {{- if .Values.gateway.securityContext }}
      securityContext:
      {{- toYaml .Values.gateway.securityContext | nindent 10 }}
      {{- end }}
      volumes:
        - name: tyk-scratch
          emptyDir: {}
        - name: {{ .Release.Name }}-default-cert
          secret:
            secretName: {{ .Release.Name }}-default-cert
        {{- if .Values.gateway.mounts }}
        {{- range $secret := .Values.gateway.mounts }}
        - name: {{ $.Release.Name }}-gateway-secret-{{ $secret.name }}
          secret:
            secretName: {{ $.Release.Name }}-gateway-secret-{{ $secret.name }}
        {{- end }}
        {{- end }}
