Thank you for installing Tyk Control Plane Chart. Your release is named {{ .Release.Name }}.

NOTE:
{{ $tykApiPort := (include "tyk-dashboard.tykApiPort" (index .Subcharts "tyk-dashboard")) -}}
    Tyk Dashboard connects to Tyk Gateway at {{ (include "tyk-dashboard.tykApiHost" (index .Subcharts "tyk-dashboard")) }} over port {{ $tykApiPort }} for key management functions.
    Please double check if Tyk Gateway runs on this address. If not, Tyk Gateway host and Tyk Gateway port can be overridden
        through .tyk-dashboard.dashboard.tykApiHost and .tyk-dashboard.dashboard.tykApiPort fields respectively in values.yaml.

{{ if index .Values "tyk-gateway" "gateway" "control" "enabled" }}
{{- $gwSvcName := printf "gateway-control-svc-%v" (include "tyk-gateway.fullname" (index .Subcharts "tyk-gateway"))  -}}
To quickly test everything is ok, you can port-forward Tyk Gateway pod:
    kubectl port-forward --namespace {{ .Release.Namespace }} service/{{ $gwSvcName }} {{ index .Values "tyk-gateway" "gateway" "control" "port" }}:{{ index .Values "tyk-gateway" "gateway" "control" "containerPort" }}
    curl localhost:{{ index .Values "tyk-gateway" "gateway" "control" "port" }}/hello
{{- else }}
{{- $gwSvcName := printf "gateway-svc-%v" (include "tyk-gateway.fullname" (index .Subcharts "tyk-gateway"))  -}}
To quickly test everything is ok, you can port-forward Tyk Gateway pod:
    kubectl port-forward --namespace {{ .Release.Namespace }} service/{{ $gwSvcName }} {{ index .Values "global" "servicePorts" "gateway" }}:{{ index .Values "global" "servicePorts" "gateway" }}
    curl localhost:{{ index .Values "global" "servicePorts" "gateway" }}/hello
{{- end }}

{{ if .Values.global.components.bootstrap -}}
=== Tyk Dashboard Login Details ===
{{- if not .Values.global.adminUser.useSecretName }}
    export TYK_DASHBOARD_ADMINEMAIL={{ .Values.global.adminUser.email }}
    export TYK_DASHBOARD_ADMINPASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} tyk-dashboard-login-details -o jsonpath="{.data.adminUserPassword}" | base64 --decode)
{{- else }}
    export TYK_DASHBOARD_ADMINEMAIL=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ .Values.global.adminUser.useSecretName }} -o jsonpath="{.data.adminUserEmail}" | base64 --decode)
    export TYK_DASHBOARD_ADMINPASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ .Values.global.adminUser.useSecretName }} -o jsonpath="{.data.adminUserPassword}" | base64 --decode)
{{- end }}
{{- end }}

=== Tyk Control Plane Details ===
Before a worker gateway that is deployed in data plane can connect to MDCB, it is important to set remote control plane options.
If the worker gateway will be deployed via Helm, tyk-data-plane chart helps to facilitate this process.

1- First obtain required connection details from Tyk MDCB:

    export GROUP_ID=your_group_id # You can use any name for your group.

{{- $operatorSecret := index .Values "tyk-bootstrap" "bootstrap" "operatorSecret" }}
{{- $edpSecret := .Values.global.secrets.devPortal }}
{{- if and .Values.global.components.bootstrap (or $operatorSecret $edpSecret) -}}
{{ if $operatorSecret }}
    export USER_API_KEY=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ $operatorSecret }} -o jsonpath="{.data.TYK_AUTH}" | base64 --decode)
    export ORG_ID=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ $operatorSecret }} -o jsonpath="{.data.TYK_ORG}" | base64 --decode)
{{ else if  $edpSecret }}
    export USER_API_KEY=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ $edpSecret}} -o jsonpath="{.data.TYK_AUTH}" | base64 --decode)
    export ORG_ID=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ $edpSecret }} -o jsonpath="{.data.TYK_ORG}" | base64 --decode)
{{- end }}
{{ else }}
    export USER_API_KEY=USER_API_KEY # Set the API key of a user used to authenticate and authorise the Gatewayâ€™s access through MDCB.
    export ORG_ID=YOUR_ORGANISATION_ID # Set your organisation id

NOTE: You can find your organisation id and user api key through Tyk Dashboard, under your user account details.
{{ end }}
2- Create a Kubernetes Secret based on credentials in data plane's namespace, e.g. `tyk-dp`.

    kubectl create namespace tyk-dp

    kubectl create secret generic tyk-data-plane-details \
    --from-literal "orgId=$ORG_ID" \
    --from-literal "userApiKey=$USER_API_KEY" \
    --from-literal "groupID=$GROUP_ID" \
    --namespace tyk-dp

3- Refer this Kubernetes secret (tyk-data-plane-details) while installing worker gateways through `global.remoteControlPlane.useSecretName` in tyk-data-plane chart.

4- Set `global.remoteControlPlane.connectionString`, `global.remoteControlPlane.useSSL` and `global.remoteControlPlane.sslInsecureSkipVerify` in tyk-data-plane chart to access MDCB service.

If data plane is deployed in the same cluster, MDCB can be accessed via this connection string:

{{- $tykMDCBFullName := (include "tyk-mdcb.fullname" (index .Subcharts "tyk-mdcb")) -}}
{{- $tykMDCBSvc := printf "mdcb-svc-%s" (include "tyk-mdcb.fullname" (index .Subcharts "tyk-mdcb")) -}}
{{- $tykMDCBSvcPort := (include "mdcb.svcPort" (index .Subcharts "tyk-mdcb")) }}
    export MDCB_CONNECTIONSTRING="{{ $tykMDCBSvc }}.{{ .Release.Namespace }}.svc:{{ $tykMDCBSvcPort }}"

If data plane is not deployed in the same cluster as control plane, get the connection string according to how MDCB service is exposed.

{{- if contains "NodePort" (index .Values "tyk-mdcb" "mdcb" "service" "type") }}
Node Port:
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ $tykMDCBSvc }})
  export NODE_IP=$(kubectl get nodes -o jsonpath="{.items[0].status.addresses[0].address}")
  export MDCB_CONNECTIONSTRING="$NODE_IP:$NODE_PORT"
{{- else if contains "LoadBalancer" (index .Values "tyk-mdcb" "mdcb" "service" "type") }}
TCP LoadBalancer:
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of service by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ $tykMDCBSvc}}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ $tykMDCBSvc }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  export MDCB_CONNECTIONSTRING=$SERVICE_IP:{{ $tykMDCBSvcPort }}
{{- end }}

For more detail about tyk-data-plane chart, please refer to the https://github.com/TykTechnologies/tyk-charts/tree/main/tyk-data-plane

{{- if index .Values "tyk-dashboard" "dashboard" "ingress" "enabled" }}
{{- $tlsEnabled := index .Values "tyk-dashboard" "dashboard" "ingress" "tls" }}
=== Tyk Dashboard Ingress ===
{{- range $host := index .Values "tyk-dashboard" "dashboard" "ingress" "hosts" }}
  {{- range .paths }}
  http{{ if $tlsEnabled }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{ end }}
{{ if .Values.global.mdcbSynchronizer.enabled }}
=== Tyk MDCB Synchroniser ===
Tyk MDCB is deployed with the Synchroniser feature enabled. Tyk Gateway(s), worker gateway(s), in the data plane has to be
configured as per the provided documentation below.

While deploying Tyk Data Plane through tyk-helm/tyk-data-plane chart, please make sure setting

    TYK_GW_SLAVEOPTIONS_SYNCHRONISERENABLED=true
    TYK_GW_SLAVEOPTIONS_KEYSPACESYNCINTERVAL=10 # based on your preference
    TYK_GW_SLAVEOPTIONS_GROUPID=YOUR_GROUP_ID # if you are running a cluster of Gateways

These environment variables can be set through either `global.mdcbSynchronizer` or manually `tyk-gateway.gateway.extraEnvs`
in tyk-data-plane/values.yaml file.

- Updating `global.mdcbSynchronizer` field in tyk-data-plane/values.yaml file
global:
    mdcbSynchronizer:
        enabled: true
        keySpaceSyncInterval: 10

- Updating `tyk-gateway.gateway.extraEnvs` field in tyk-data-plane/values.yaml file
tyk-gateway:
    gateway:
        extraEnvs:
            - name: TYK_GW_SLAVEOPTIONS_SYNCHRONISERENABLED
              value: "true"
            - name: TYK_GW_SLAVEOPTIONS_KEYSPACESYNCINTERVAL
              value: "10"
            - name: TYK_GW_SLAVEOPTIONS_GROUPID
              value: "FOOBAR"

For more details about setting Tyk Gateways in Tyk Data Plane, please refer to official documentation:
    https://tyk.io/docs/product-stack/tyk-enterprise-mdcb/advanced-configurations/synchroniser/

{{ end -}}

===================================================
  Manage Ingress resources and APIs on Kubernetes
===================================================
You might want to install Tyk Operator next to manage Ingress resources or manage your APIs.
Please check Tyk Operator documentation at https://tyk.io/docs/tyk-operator/
