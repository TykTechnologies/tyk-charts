apiVersion: apps/v1
kind: Deployment
metadata:
  name: pump-{{ include "tyk-pump.fullname" . }}
  {{- if .Values.pump.annotations }}
  annotations:
  {{- toYaml .Values.pump.annotations | nindent 4 }}
  {{- end }}
  labels:
    app: pump-{{ include "tyk-pump.fullname" . }}
    chart: {{ include "tyk-pump.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.pump.replicaCount }}
  selector:
    matchLabels:
      app: pump-{{ include "tyk-pump.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      {{- if .Values.pump.podAnnotations }}
      annotations: {{ toYaml .Values.pump.podAnnotations | nindent 8 }}
      {{- end }}
      labels:
        app: pump-{{ include "tyk-pump.fullname" . }}
        release: {{ .Release.Name }}
        {{- with .Values.pump.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}        
    spec:
    {{- if .Values.pump.serviceAccountName }}
      serviceAccountName: "{{ .Values.pump.serviceAccountName }}"
    {{- end }}
{{- if .Values.pump.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.pump.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.pump.tolerations }}
      tolerations:
{{ toYaml .Values.pump.tolerations | indent 8 }}
{{- end }}
{{- if .Values.pump.affinity }}
      affinity:
{{ toYaml .Values.pump.affinity | indent 8 }}
{{- end }}
      {{- with .Values.pump.imagePullSecrets }}
      imagePullSecrets: {{ toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: pump-{{ .Chart.Name }}
        image: "{{ .Values.global.imageRegistry }}{{ .Values.pump.image.repository }}:{{ .Values.pump.image.tag }}"
        imagePullPolicy: {{ .Values.pump.image.pullPolicy }}
        workingDir: "/opt/tyk-pump"
        ports:
          - name: tyk-pump-port
            containerPort: {{ .Values.pump.containerPort }}
        {{- if .Values.pump.containerSecurityContext }}
        securityContext:
        {{- toYaml .Values.pump.containerSecurityContext | nindent 12 }}
        {{- end }}

        {{- if .Values.pump.healthCheckService.enabled }}
        livenessProbe:
          httpGet:
            scheme: "HTTP"
            path: /{{ .Values.pump.healthCheckService.path }}
            port: {{ .Values.pump.healthCheckService.port }}
        {{- with (default nil .Values.pump.livenessProbe) }}
          {{- toYaml . | nindent 10 }}
        {{- end }}

        readinessProbe:
          httpGet:
            scheme: "HTTP"
            path: /{{ .Values.pump.healthCheckService.path }}
            port: {{ .Values.pump.healthCheckService.port }}
        {{- with (default nil .Values.pump.readinessProbe) }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- end }}
        env:
          # Legacy support for Redis Cluster driver. Driver dropped in v3.0.0.
          - name: REDIGOCLUSTER_SHARDCOUNT
            value: "128"
         {{ if has "hybrid" .Values.pump.backend }}
          # Configure Hybrid Pump for Tyk Pump
          - name: TYK_PMP_PUMPS_HYBRID_TYPE
            value: hybrid
          - name: TYK_PMP_PUMPS_HYBRID_META_CONNECTIONSTRING
            value: "{{ .Values.global.remoteControlPlane.connectionString }}"
          
          - name: TYK_PMP_PUMPS_HYBRID_META_RPCKEY
          {{- if .Values.global.remoteControlPlane.useSecretName }}
            valueFrom: 
              secretKeyRef:
                name: {{.Values.global.remoteControlPlane.useSecretName}}
                key: orgId
          {{- else }}
            value: "{{ .Values.global.remoteControlPlane.orgId }}"
          {{- end }}

          - name: TYK_PMP_PUMPS_HYBRID_META_APIKEY
          {{- if .Values.global.remoteControlPlane.useSecretName }}
            valueFrom: 
              secretKeyRef:
                name: {{.Values.global.remoteControlPlane.useSecretName}}
                key: userApiKey
          {{- else }}
            value: "{{ .Values.global.remoteControlPlane.userApiKey }}"
          {{- end }}

          - name: TYK_PMP_PUMPS_HYBRID_META_GROUPID
            {{- if .Values.global.remoteControlPlane.useSecretName }}
            valueFrom: 
              secretKeyRef:
                name: {{.Values.global.remoteControlPlane.useSecretName}}
                key: groupID
          {{- else }}
            value: "{{ .Values.global.remoteControlPlane.groupID }}"
          {{- end }}

          - name: TYK_PMP_PUMPS_HYBRID_META_USESSL
            value: "{{ .Values.global.remoteControlPlane.useSSL }}"
          - name: TYK_PMP_PUMPS_HYBRID_META_SSLINSECURESKIPVERIFY
            value: "{{ .Values.global.remoteControlPlane.sslInsecureSkipVerify }}"
          - name: TYK_PMP_PUMPS_HYBRID_META_AGGREGATED
            value: "{{ .Values.pump.hybridPump.enableAggregateAnalytics }}"
            {{ if .Values.pump.hybridPump.callTimeout }}
          - name: TYK_PMP_PUMPS_HYBRID_META_CALLTIMEOUT
            value: "{{ .Values.pump.hybridPump.callTimeout }}"
            {{ end }}
            {{ if .Values.pump.hybridPump.poolSize }}
          - name: TYK_PMP_PUMPS_HYBRID_META_RPCPOOLSIZE
            value: "{{ .Values.pump.hybridPump.poolSize }}"
            {{ end }}
          {{ end }}
          {{ if has "prometheus" .Values.pump.backend }}
          # Configure Prometheus Pump for Tyk Pump
          - name: TYK_PMP_PUMPS_PROMETHEUS_TYPE
            value: prometheus
          # Since PodMonitor is in use, please use containerPort of Tyk Pump pod.
          - name: TYK_PMP_PUMPS_PROMETHEUS_META_ADDR
            value: "{{ .Values.pump.prometheusPump.host }}:{{ .Values.pump.containerPort }}"
          - name: TYK_PMP_PUMPS_PROMETHEUS_META_PATH
            value: "{{ .Values.pump.prometheusPump.path }}"
            {{ if .Values.pump.prometheusPump.customMetrics }}
          - name: TYK_PMP_PUMPS_PROMETHEUS_META_CUSTOMMETRICS
            value: {{ toYaml .Values.pump.prometheusPump.customMetrics }}
            {{ end }}
          {{ end }}

          {{ if or (has "postgres-pump" .Values.pump.backend) (has "postgres" .Values.pump.backend) }}
          # SQL Pump
          - name: TYK_PMP_PUMPS_SQL_TYPE
            value: "sql"
          - name: TYK_PMP_PUMPS_SQL_META_TYPE
            value: "postgres"
          - name: TYK_PMP_PUMPS_SQL_META_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.pg_connection_string_secret_name" . }}
                key: {{ include "tyk-pump.pg_connection_string_secret_key" . }}

          #SQL Graph Pump
          - name: TYK_PMP_PUMPS_SQLGRAPH_TYPE
            value: "sql-graph"
          - name: TYK_PMP_PUMPS_SQLGRAPH_META_TYPE
            value: "postgres"
          - name: TYK_PMP_PUMPS_SQLGRAPH_META_TABLENAME
            value: "{{ default "tyk_analytics_graphs" .Values.pump.sqlGraphPump.tableName }}"
          - name: TYK_PMP_PUMPS_SQLGRAPH_META_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.pg_connection_string_secret_name" . }}
                key: {{ include "tyk-pump.pg_connection_string_secret_key" . }}
          {{ end }}
          {{ if or (has "postgres" .Values.pump.backend) (has "postgres-aggregate" .Values.pump.backend) }}
          # SQL Aggregate Pump
          - name: TYK_PMP_PUMPS_SQLAGGREGATE_TYPE
            value: "sql_aggregate"
          - name: TYK_PMP_PUMPS_SQLAGGREGATE_META_TYPE
            value: "postgres"
          - name: TYK_PMP_PUMPS_SQLAGGREGATE_META_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.pg_connection_string_secret_name" . }}
                key: {{ include "tyk-pump.pg_connection_string_secret_key" . }}

          # SQL Aggregate Graph Pump
          - name: TYK_PMP_PUMPS_GRAPHSQLAGGREGATE_TYPE
            value: "sql-graph-aggregate"
          - name: TYK_PMP_PUMPS_GRAPHSQLAGGREGATE_META_TYPE
            value: "postgres"
          - name: TYK_PMP_PUMPS_GRAPHSQLAGGREGATE_META_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.pg_connection_string_secret_name" . }}
                key: {{ include "tyk-pump.pg_connection_string_secret_key" . }}
          {{ end }}
          {{ if has "mongo" .Values.pump.backend }}
          # Mongo Pump
          - name: TYK_PMP_PUMPS_MONGO_META_COLLECTIONNAME
            value: "tyk_analytics_pump"
          - name: TYK_PMP_PUMPS_MONGO_META_MONGOUSESSL
            value: "{{ default "false" .Values.global.mongo.useSSL }}"
          - name: TYK_PMP_PUMPS_MONGO_META_MONGOURL
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.mongo_url_secret_name" . }}
                key: {{ include "tyk-pump.mongo_url_secret_key" . }}
          - name: TYK_PMP_PUMPS_MONGO_META_MONGODRIVERTYPE
            value: "{{ default "mongo-go" .Values.global.mongo.driver}}"

          # Mongo Graph Pump
          - name: TYK_PMP_PUMPS_GRAPHMONGO_TYPE
            value: "mongo-graph"
          - name: TYK_PMP_PUMPS_GRAPHMONGO_META_COLLECTIONNAME
            value: "{{ default "tyk_graph_analytics" .Values.pump.mongoGraphPump.tableName }}"
          - name: TYK_PMP_PUMPS_GRAPHMONGO_META_MONGOUSESSL
            value: "{{ default "false" .Values.global.mongo.useSSL }}"
          - name: TYK_PMP_PUMPS_GRAPHMONGO_META_MONGOURL
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.mongo_url_secret_name" . }}
                key: {{ include "tyk-pump.mongo_url_secret_key" . }}
          - name: TYK_PMP_PUMPS_GRAPHMONGO_META_MONGODRIVERTYPE
            value: "{{ default "mongo-go" .Values.global.mongo.driver}}"
          {{ end }}
          {{ if or (has "mongo" .Values.pump.backend) (has "mongo-aggregate" .Values.pump.backend) }}
          # Mongo Aggregate Pump
          - name: TYK_PMP_PUMPS_MONGOAGGREGATE_TYPE
            value: "mongo-pump-aggregate"
          - name: TYK_PMP_PUMPS_MONGOAGGREGATE_META_MONGOUSESSL
            value: "{{ default "false" .Values.global.mongo.useSSL }}"
          - name: TYK_PMP_PUMPS_MONGOAGGREGATE_META_MONGOURL
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.mongo_url_secret_name" . }}
                key: {{ include "tyk-pump.mongo_url_secret_key" . }}
          - name: TYK_PMP_PUMPS_MONGOAGGREGATE_META_COLLECTIONNAME
            value: "tyk_analytics_pump"
          - name: TYK_PMP_PUMPS_MONGOAGGREGATE_META_USEMIXEDCOLLECTION
            value: "true"
          - name : TYK_PMP_PUMPS_MONGOAGGREGATE_META_MONGODRIVERTYPE
            value: "{{ default "mongo-go" .Values.global.mongo.driver}}"
          {{ end }}
          {{ if or (has "mongo" .Values.pump.backend) (has "mongo-selective" .Values.pump.backend) }}
          - name: TYK_PMP_PUMPS_MONGOSELECTIVE_TYPE
            value: "mongo-pump-selective"
          - name: TYK_PMP_PUMPS_MONGOSELECTIVE_META_MONGOURL
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.mongo_url_secret_name" . }}
                key: {{ include "tyk-pump.mongo_url_secret_key" . }}
          - name: TYK_PMP_PUMPS_MONGOSELECTIVE_META_MONGOUSESSL
            value: "{{ default "false" .Values.global.mongo.useSSL }}"
          - name: TYK_PMP_PUMPS_MONGOSELECTIVE_META_MONGODRIVERTYPE
            value: "{{ default "mongo-go" .Values.global.mongo.driver}}"
          {{ end }}

          {{- if .Values.global.redis.sslInsecureSkipVerify }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_REDISSSLINSECURESKIPVERIFY
            value: "{{ .Values.global.redis.sslInsecureSkipVerify }}"  
          {{- end}}

          # Redis TLS configurations
          {{- if .Values.global.redis.useSSL }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_SSLMAXVERSION
            value: "{{ .Values.global.redis.tlsMaxVersion }}"
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_SSLMINVERSION
            value: "{{ .Values.global.redis.tlsMinVersion }}" 
          {{- end }}

          {{- with .Values.global.redis }}
          {{- if and .useSSL .sslCAFile }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_SSLCAFILE
            value: "{{ .sslCAFile }}"
          {{- end }}
          {{- end }}          

          {{- with .Values.global.redis }}
          {{- if and .useSSL .sslCertFile .sslKeyFile }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_SSLCERTFILE
            value: "{{ .sslCertFile }}"
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_SSLKEYFILE
            value: "{{ .sslKeyFile }}"   
          {{- end }}
          {{- end }}                                 

          # Uptime Pump configurations
          {{ if eq "disabled" (include "tyk-pump.uptimePump" .) }}
          - name: TYK_PMP_DONTPURGEUPTIMEDATA
            value: "true"
          {{ else }}
          - name: TYK_PMP_UPTIMEPUMPCONFIG_COLLECTIONNAME
            value: "tyk_uptime_analytics"
          {{ if eq "postgres" (include "tyk-pump.uptimePump" .) }}
          # SQL Uptime Pump
          - name: TYK_PMP_UPTIMEPUMPCONFIG_UPTIMETYPE
            value: "sql"
          - name: TYK_PMP_UPTIMEPUMPCONFIG_TYPE
            value: "postgres"
          - name: TYK_PMP_UPTIMEPUMPCONFIG_CONNECTIONSTRING
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.pg_connection_string_secret_name" . }}
                key: {{ include "tyk-pump.pg_connection_string_secret_key" . }}
          {{ else if eq "mongo" (include "tyk-pump.uptimePump" .) }}
          # Mongo Uptime Pump
          - name: TYK_PMP_UPTIMEPUMPCONFIG_MONGOURL
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.mongo_url_secret_name" . }}
                key: {{ include "tyk-pump.mongo_url_secret_key" . }}
          - name: TYK_PMP_UPTIMEPUMPCONFIG_MONGOUSESSL
            value: "{{ default "false" .Values.global.mongo.useSSL }}"
          - name: TYK_PMP_UPTIMEPUMPCONFIG_MONGODRIVERTYPE
            value: "{{ default "mongo-go" .Values.global.mongo.driver}}"
          {{ end }}
          {{ end }}

          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_ADDRS
            value: {{ include "tyk-pump.redis_url" . | quote }}
          {{ if .Values.global.redis.enableSentinel }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_SENTINELPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "tyk-pump.redis_secret_name" . }}
                key: {{ include "tyk-pump.redis_secret_key" . }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_MASTERNAME
            value: "{{- .Values.global.redis.masterName -}}"
          {{ else if .Values.global.redis.enableCluster }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_ENABLECLUSTER
            value: "true"
          {{ else }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_MASTERNAME
            value: ""
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_ENABLECLUSTER
            value: "false"
          {{ end }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_PASSWORD
            valueFrom:
              secretKeyRef:
               name: {{ include "tyk-pump.redis_secret_name" . }}
               key: {{ include "tyk-pump.redis_secret_key" . }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_REDISUSESSL
            value: "{{ .Values.global.redis.useSSL }}"

          - name: TYK_PMP_OMITCONFIGFILE
            value: {{ .Values.pump.omitConfigFile | quote}}
          - name: TYK_PMP_ANALYTICSSTORAGETYPE
            value: "redis"
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_MAXIDLE
            value: {{ .Values.pump.maxIdleConnections | quote }}
          - name: TYK_PMP_ANALYTICSSTORAGECONFIG_MAXACTIVE
            value: {{ .Values.pump.maxActiveConnections | quote }}
          - name: TYK_PMP_PURGEDELAY
            value: {{ .Values.pump.purgeDelay | quote }}
        {{- if .Values.pump.healthCheckService.enabled }}
          - name: TYK_PMP_HEALTHCHECKENDPOINTNAME
            value: "{{ .Values.pump.healthCheckService.path }}"
          - name: TYK_PMP_HEALTHCHECKENDPOINTPORT
            value: "{{ .Values.pump.healthCheckService.port }}"
        {{- end }}              

        {{- if .Values.pump.extraEnvs }}
        {{- include "tyk-pump.tplvalues.render" ( dict "value" .Values.pump.extraEnvs "context" $ ) | nindent 10 }}
        {{- end }}

        volumeMounts:
          {{- if .Values.pump.extraVolumeMounts }}
          {{- include "tyk-pump.tplvalues.render" (dict "value" .Values.pump.extraVolumeMounts "context" $) | nindent 10 }}
          {{- end }}

          {{- with .Values.global.redis }}
          {{- if and .useSSL .volumeName .certificatesMountPath }}
          - name: {{ .volumeName }}
            mountPath: {{ .certificatesMountPath }}
          {{- end }}
          {{- end }}

        resources:
{{ toYaml .Values.pump.resources | indent 12 }}
      {{- if .Values.pump.securityContext }}
      {{- with .Values.pump.extraContainers }}
      {{- include "tyk-pump.tplvalues.render" (dict "value" . "context" $) | nindent 6 }}
      {{- end }}
      securityContext:
      {{- toYaml .Values.pump.securityContext | nindent 10 }}
      {{- end }}
      volumes:
        {{- if .Values.pump.extraVolumes }}
        {{- include "tyk-pump.tplvalues.render" (dict "value" .Values.pump.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
        {{- with .Values.global.redis }}
        {{- if and .useSSL .secretName .volumeName }}
        - name: {{ .volumeName }}
          secret:
            secretName: {{ .secretName }}
        {{- end }}
        {{- end }}
