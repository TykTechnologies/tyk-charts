## Default values for tyk-pump chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.
## See Tyk Helm documentation for installation details:
## https://tyk.io/docs/tyk-oss/ce-helm-chart/
## Registry for all Tyk images - https://hub.docker.com/u/tykio

# Overrides chart name. It is truncated to 63 characters.
# Default value: tyk-pump.name
nameOverride: ""

# Overrides app name. It is truncated to 63 characters.
# Default value: tyk-pump.fullname
fullnameOverride: ""

global:
  imageRegistry: ""
  redis:
    # The addrs value will allow you to set your Redis addresses.
    #
    # If you are using Redis (e.g. Bitnami Redis at bitnami/redis) then enter single
    # endpoint. If using sentinel connection mode for Redis, please update the port number (typically 26379).
    #
    # If using a Redis Cluster (e.g. bitnami/redis-cluster), you can list
    # the endpoints of the redis instances or use the cluster configuration endpoint.
    #
    # Default value: redis.{{ .Release.Namespace }}.svc:6379
    # addrs:
    #   Example using tyk simple redis chart
    #   - redis.tyk.svc:6379
    #   Example using bitnami/redis
    #   - tyk-redis-master.tyk.svc:6379
    #   Example using bitnami/redis with sentinel
    #   - tyk-redis.tyk.svc:26379
    #   Example using bitnami/redis-cluster
    #   - tyk-redis-redis-cluster.tyk.svc:6379

    # Redis password
    # If you're using Bitnami Redis chart (e.g. bitnami/redis) please input
    # your password in the field below
    # pass: ""

    # Redis password can also be provided via a secret. Provide the name of the secret and key below.
    # passSecret:
    #   name: ""
    #   keyName: ""

    # Enables SSL for Redis connection. Redis instance will have to support that.
    # Default value: false
    useSSL: false

    # Path to the CA file.
    # sslCAFile: "/etc/certs/ca.crt"

    # The Volume mount path
    # Default value: /etc/certs 
    # certificatesMountPath: "/etc/certs"    

    # Path to the cert file.
    # sslCertFile: "/etc/certs/redis.crt"  

    # Path to the key file.
    # sslKeyFile: "/etc/certs/redis.key"

    # Maximum supported TLS version. Valid values are TLS 1.0, 1.1, 1.2, 1.3.
    # Default value: 1.3
    # tlsMaxVersion: "1.3"

    # Minimum supported TLS version. Valid values are TLS 1.0, 1.1, 1.2, 1.3.
    # Default value: 1.2
    # tlsMinVersion: "1.2"

    # Set this to `true` to tell Pump to ignore database's cert validation.
    # Default value: true
    # sslInsecureSkipVerify: true

    # Name of the tls secret. A secret needs to be created for this manually using the name as specified here
    # Default value: pmp-tls-secret 
    # secretName: "pmp-tls-secret"

    # Name of the volume where the secret will be mounted
    # Default value: pmp-tls-secret-volume 
    # volumeName: "pmp-tls-secret-volume"

    # If using "Redis Cluster" set enableCluster to true
    # (e.g. if using bitnami/redis-cluster)
    # enableCluster: true

    # Enables sentinel connection mode for Redis. If enabled, provide both
    # mandatory values for sentinelPass and masterName.
    # enableSentinel: false

    # Redis sentinel master name, only required while enableSentinel is true.
    # For bitnami/redis typically redis-master
    # masterName: ""

    # By default, the database index is 0. Setting the database index is not
    # supported with redis cluster. As such, if you have enableCluster: true,
    # then this value should be omitted or explicitly set to 0.
    storage:
      database: 0

  # If Mongo pump is in use, please set the connection details of MongoDB in the below field.
  # Please check https://tyk.io/docs/planning-for-production/database-settings/mongodb/#supported-versions
  # for the list of supported MongoDB versions.
  mongo:
    # The mongoURL value will allow you to set your MongoDB address.
    # Default value: mongodb://mongo.{{ .Release.Namespace }}.svc:27017/tyk_analytics
    # mongoURL: mongodb://mongo.tyk.svc:27017/tyk_analytics
    # If your MongoDB has a password you can add the username and password to the url
    # mongoURL: mongodb://root:pass@tyk-mongo-mongodb.tyk.svc:27017/tyk_analytics?authSource=admin

    # mongo-go driver is supported for Tyk 5.0.2+.
    # We recommend using the mongo-go driver if you are using MongoDB 4.4.x+.
    # For MongoDB versions prior to 4.4, please use the mgo driver.
    # Since Tyk-Pump 1.9 the default driver is mongo-go.
    driver: mongo-go

    # Connection URL can also be set using a secret. Provide the name of the secret and key below.
    # connectionURLSecret:
    #   name: ""
    #   keyName: ""

    # Enables SSL for MongoDB connection. MongoDB instance will have to support that.
    # Default value: false
    useSSL: false

  # If postgres pump is in use, please set the connection details of Postgres in the below field.
  postgres:
    # host corresponds to the host name of postgres
    host: tyk-postgres-postgresql.tyk.svc
    # port corresponds to the port of postgres
    port: 5432
    # user corresponds to the user of postgres
    user: postgres
    # password corresponds to the password of the given postgres user in selected database
    password:
    # database corresponds to the database to be used in postgres
    database: tyk_analytics
    # sslmode corresponds to if postgres runs in sslmode (https)
    sslmode: disable

    # Connection string can also be set using a secret. Provide the name of the secret and key below.
    # connectionStringSecret:
    #   name: ""
    #   keyName: ""

  remoteControlPlane:
    # useSecretName can be used if you don't want to store plaintext values for remote control plane configurations in
    # the Helm value file and would rather provide the k8s Secret externally.
    # You should set following fields in the secret
    # - orgId - Sets slave_options.rpc_key of Tyk Gateway
    # - userApiKey - Sets slave_options.api_key of Tyk Gateway
    # - groupID - Sets slave_options.group_id of Tyk Gateway
    useSecretName: ""

    # connection string used to connect to an MDCB deployment. For Tyk Cloud users, you can get it from Tyk Cloud Console and retrieve the MDCB connection string.
    connectionString: ""
    # orgID of your dashboard user
    orgId: ""
    # API key of your dashboard user
    userApiKey: ""
    # needed in case you want to have multiple data-planes connected to the same redis instance
    groupID: ""
    # enable/disable ssl
    useSSL: true
    # Disables SSL certificate verification
    sslInsecureSkipVerify: true

# If pump is enabled the Gateway will create and collect analytics data to send
# to a data store of your choice. These can be set up in the pump config. The
# possible pump configs can be found here:
# https://github.com/TykTechnologies/tyk-pump#configuration
pump:
  # number for replicas for pump deployment
  replicaCount: 1

  # annotations be added to the Deployment of Tyk Pump
  annotations: {}

  # podAnnotations is annotations to be added to Tyk Pump pod.
  # It takes key-value pairs.
  # There are no required annotation field for Tyk Pump.
  #
  # podAnnotations:
  #   yourkey: value
  #   image: yourhub
  podAnnotations: {}

  # podLabels specifies labels to be added in pump Pod
  podLabels: {}

  image:
    # image repository for Tyk pump
    repository: docker.tyk.io/tyk-pump/tyk-pump

    # tag for Tyk pump
    tag: v1.13.0

    # image pull policy
    pullPolicy: IfNotPresent

  # image pull secrets to use when pulling images from repository
  imagePullSecrets: []

  service:
    # Tyk Pump svc is disabled by default. Set it to true to enable it.
    enabled: false

    # type specifies type of the service.
    type: ClusterIP

    # port specifies the port exposed by the service.
    port: 9090

    # externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or
    # cluster-wide endpoints, while using LoadBalancer type of service.
    externalTrafficPolicy: Local

    # annotations specifies annotations to be added Tyk Pump service.
    annotations: {}

    # The name for the service port
    portName: ""

  healthCheckService:
    # type specifies type of the service.
    type: ClusterIP

    # Tyk Pump health service is disabled by default. 
    # Set it to true to enable it.
    enabled: false

    # path sets the health check path.
    path: "hello"

    # port sets the health check port. 
    # It defaults to 8083 if health check is enabled and it is not set.
    port: 8083

    # The name for the health check service port
    portName: ""

    # annotations specifies annotations to be added Tyk Pump service.
    annotations: {}

    # externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or
    # cluster-wide endpoints, while using LoadBalancer type of service.
    externalTrafficPolicy: Local       

  # containerPort represents the port where Tyk Pump serve the metrics, for instance metrics for Prometheus.
  # The default port is 9090.
  containerPort: 9090
  # omitConfigFile defines if tyk-pump should ignore all the values in configuration file.
  # It is used to set TYK_PMP_OMITCONFIGFILE
  omitConfigFile: true
  # purgeDelay configures number of seconds the Pump waits between checking for analytics data and purge it from Redis.
  # It is used to set TYK_PMP_PURGEDELAY
  purgeDelay: 2
  # maxIdleConnections configures maximum number of idle connections in the pool
  # It is used to set TYK_PMP_ANALYTICSSTORAGECONFIG_MAXIDLE
  maxIdleConnections: 2000
  # maxActiveConnections configures Maximum number of connections allocated by the pool at a given time. 
  # When zero, there is no limit on the number of connections in the pool.
  # It is used to set TYK_PMP_ANALYTICSSTORAGECONFIG_MAXACTIVE
  maxActiveConnections: 4000

  # backend defines the pumps to be created by default, as an array of string.
  # Supported backends are:
  #   - "mongo": Enables Mongo Aggregate and Mongo Selective Pump
  #   - "mongo-aggregate": Enables ONLY Mongo Aggregate AND Mongo Graph Pump
  #   - "mongo-selective": Enables ONLY Mongo Selective
  #   - "postgres": Enables Postgres Aggregate, Postgres Graph Aggregate, SQL Pump and SQL graph pump
  #   - "postgres-aggregate": Enables ONLY SQL Aggregate AND SQL Graph Aggregate
  #   - "postgres-pump": Enables ONLY SQL Pump AND SQL graph pump
  #   - "prometheus": Enables Prometheus Pump. See pump.prometheusPump for Prometheus Pump configurations.
  #   - "hybrid": Enables Hybrid Pump
  # If you would like to use other backends such as ElasticSearch, please
  # configure the backend via environment variables.
  backend:
    - "prometheus"

  # uptimePumpBackend configures uptime Tyk Pump. ["", "mongo", "postgres"].
  # Set it to "" for disabling uptime Tyk Pump. By default, uptime pump is disabled.
  uptimePumpBackend: ""

  # hybridPump configures Tyk Pump to forward Tyk metrics to a Tyk Control Plane.
  # Please add "hybrid" to .Values.pump.backend in order to enable Hybrid Pump.
  hybridPump:
    # This wiil allow tyk-pump to pull analytics from Redis and send to your own data sinks.
    enableAggregateAnalytics: true
    # Hybrid pump RPC calls timeout in seconds. If not specified, default value will be picked up by Tyk Pump.
    callTimeout: 10
    # Hybrid pump connection pool size. If not specified, default value will be picked up by Tyk Pump.
    poolSize: 5

  # prometheusPump configures Tyk Pump to expose Prometheus metrics.
  # Please add "prometheus" to .Values.pump.backend in order to enable Prometheus Pump.
  # The container port where Tyk Pump serves the metrics to Prometheus can be configured
  # via .pump.containerPort field.
  prometheusPump:
    # host represents the host without port, where Tyk Pump serve the metrics for Prometheus.
    host: ""
    # path represents the path to the Prometheus collection. For example /metrics.
    path: /metrics
    # customMetrics allows defining custom Prometheus metrics for Tyk Pump.
    # It accepts a string that represents a JSON object. For instance,
    #
    # customMetrics: '[{"name":"tyk_http_requests_total","description":"Total of API requests","metric_type":"counter","labels":["response_code","api_name","method","api_key","alias","path"]},          {              "name":"tyk_http_latency",              "description":"Latency of API requests",              "metric_type":"histogram",              "labels":["type","response_code","api_name","method","api_key","alias","path"]          }]'
    customMetrics: ""
    # If you are using prometheus Operator, set the fields in the section below.
    prometheusOperator:
      # enabled determines whether the Prometheus Operator is in use or not. By default,
      # it is disabled.
      # Tyk Pump can be monitored with PodMonitor Custom Resource of Prometheus Operator.
      # If enabled, PodMonitor resource is created based on .Values.pump.prometheusPump.prometheusOperator.podMonitorSelector
      # for Tyk Pump.
      enabled: false
      # podMonitorSelector represents a podMonitorSelector of your Prometheus resource. So that
      # your Prometheus resource can select PodMonitor objects based on selector defined here.
      # Please set this field to the podMonitorSelector field of your monitoring.coreos.com/v1
      # Prometheus resource's spec.
      #
      # You can check the podMonitorSelector via:
      #   kubectl describe prometheuses.monitoring.coreos.com <PROMETHEUS_POD>
      podMonitorSelector:
        release: prometheus-stack

  # sqlGraphPump configures values to be used to configure tyk sql graph pump.
  sqlGraphPump:
    # tableName is the name of the table that will be created and used by the sql graph pump
    tableName: "tyk_analytics_graphs"

  # mongoGraphPump configures values to be used to configure tyk mongo graph pump.
  mongoGraphPump:
    # collectionName is the name of the collection that will be created and used by the mongo graph pump
    collectionName: "tyk_graph_analytics"

  # We usually recommend not to specify default resources and to leave this
  # as a conscious choice for the user. This also increases chances charts
  # run on environments with little resources, such as Minikube. If you do
  # want to specify resources, uncomment the following lines, adjust them
  # as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
  resources: {}

  # securityContext values for pump pod. All fields from PodSecurityContext object can be added here.
  securityContext:
    runAsUser: 1000
    fsGroup: 2000
    runAsNonRoot: true   

  # containerSecurityContext values for pump container. All fields from SecurityContext object can be added here.
  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    allowPrivilegeEscalation: false
    privileged: false
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL

  # node labels for pump pod assignment
  nodeSelector: {}

  # tolerations for pump pod assignment
  tolerations: []

  # affinity for pump pod assignment
  affinity: {}

  # extraContainers is a list of containers to be added to the pod
  # - name: sidecar
  #   image: sidecar:latest
  extraContainers: []

  # extraEnvs is used to set environment variables in pump container
  # - name: TYK_PMP_PURGEDELAY
  #   value: 30
  extraEnvs: []

  # extraVolumes is a list of volumes to be added to the pod
  # extraVolumes:
  #   - name: ca-certs
  #     secret:
  #       defaultMode: 420
  #       secretName: ca-certs
  extraVolumes: []

  # extraVolumeMounts is a list of volume mounts to be added to the pod
  # extraVolumeMounts:
  #   - name: ca-certs
  #     mountPath: /etc/ssl/certs/ca-certs.crt
  #     readOnly: true
  extraVolumeMounts: []

  # serviceAccountName field indicates the name of the Service Account that is going to be used by the Pods.
  # If a service account is to be used for Tyk Pump, it should be manually created
  serviceAccountName: ""

  # livenessProbe:
  #   initialDelaySeconds: 10
  #   periodSeconds: 2
  #   timeoutSeconds: 3
  #   failureThreshold: 2
  livenessProbe: {}

  # readinessProbe:
    # initialDelaySeconds: 10
    # periodSeconds: 10
    # timeoutSeconds: 3
    # failureThreshold: 3
  readinessProbe: {}
