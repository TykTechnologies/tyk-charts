# Default values for tyk-mdcb-data-plane.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  components:
    # Determines whether or not the pump component should be installed.
    pump: true

  remoteControlPlane:
    enabled: true
    # connection string used to connect to an MDCB deployment. For Tyk Cloud users, you can get it from Tyk Cloud Console and retrieve the MDCB connection string.
    connectionString: ""
    # orgID of your dashboard user
    orgId: ""
    # API key of your dashboard user
    userApiKey: ""
    # needed in case you want to have multiple data-planes connected to the same redis instance
    groupID: ""
    # enable/disable ssl
    useSSL: true
    # Disables SSL certificate verification
    sslInsecureSkipVerify: true

  secrets:
    # APISecret sets node_secret and secret in tyk.conf
    APISecret: CHANGEME

  redis:
    # The addrs value will allow you to set your Redis addresses.
    #
    # If you are using Redis (e.g. Bitnami Redis at bitnami/redis) then enter single
    # endpoint. If using sentinel connection mode for Redis, please update the port number (typically 26379).
    #
    # If using a Redis Cluster (e.g. bitnami/redis-cluster), you can list
    # the endpoints of the redis instances or use the cluster configuration endpoint.
    #
    # Default value: redis.{{ .Release.Namespace }}.svc.cluster.local:6379
    # addrs:
    #   - tyk-redis-master.tyk.svc.cluster.local:6379
    #   Example using tyk simple redis chart
    #   - redis.tyk.svc.cluster.local:6379
    #   Example using bitnami/redis
    #   - tyk-redis-master.tyk.svc.cluster.local:6379
    #   Example using bitnami/redis with sentinel
    #   - tyk-redis.tyk.svc.cluster.local:26379
    #   Example using bitnami/redis-cluster
    #   - tyk-redis-redis-cluster.tyk.svc.cluster.local:6379

    # Redis password
    # If you're using Bitnami Redis chart (e.g. bitnami/redis) please input
    # your password in the field below
    pass: ""

    # Enables SSL for Redis connection. Redis instance will have to support that.
    # Default value: false
    # useSSL: true

    # If using "Redis Cluster" set enableCluster to true
    # (e.g. if using bitnami/redis-cluster)
    # enableCluster: true

    # Enables sentinel connection mode for Redis. If enabled, provide both
    # mandatory values for sentinelPass and masterName.
    # enableSentinel: false

    # Redis sentinel password, only required while enableSentinel is true.
    # For bitnami/redis the same password as Redis above
    # sentinelPass: ""

    # Redis sentinel master name, only required while enableSentinel is true.
    # For bitnami/redis typically redis-master
    # masterName: ""

    # By default the database index is 0. Setting the database index is not
    # supported with redis cluster. As such, if you have enableCluster: true,
    # then this value should be omitted or explicitly set to 0.
    storage:
      database: 0



tyk-gateway:
  ## Default values for tyk-gateway chart.
  ## This is a YAML-formatted file.
  ## Declare variables to be passed into your templates.
  ## See Tyk Helm documentation for installation details:
  ## https://tyk.io/docs/tyk-oss/ce-helm-chart/
  ## Registry for all Tyk images - https://hub.docker.com/u/tykio

  # nameOverride overrides the Chart name. It is truncated to 63 characters.
  # Default value: tyk-gateway.name
  nameOverride: ""

  # fullnameOverride overrides App name. It is truncated to 63 characters.
  # Default value: tyk-gateway.fullname
  fullnameOverride: ""

  gateway:
    # The hostname to bind the Gateway to.
    hostName: tyk-gw.local

    tls:
      # When true, sets the gateway protocol to HTTPS.
      enabled: false
      # When true, it will install the certificate present in the templates folder, set to false when using
      # a custom TLS certificate to avoid overwriting yours
      useDefaultTykCertificate: true
      # The name of the secret which should contain the TLS certificate you want to use with the gateway deployment
      secretName: tyk-default-tls-secret

    # kind is type of k8s object to be created for gateway.
    kind: Deployment

    # replicaCount specifies number of replicas to be created if kind is Deployment.
    replicaCount: 1

    # containerPort for gateway
    containerPort: 8080

    image:
      # image repository for Tyk Gateway
      repository: tykio/tyk-gateway

      # image tag for Tyk Gateway
      tag: v4.3.1

      # image pull policy for Tyk Gateway
      pullPolicy: IfNotPresent

    service:
      # type of service
      type: NodePort

      # service port
      port: 443

      # external traffic policy of the service. Set it only if you are using LoadBalancer service type
      externalTrafficPolicy: Local

      # annotations for service
      annotations: {}

    control:
      # If enabled, exposes control port of the gateway
      enabled: false

      # control port of gateway
      containerPort: 9696

      # port number for control port service
      port: 9696

      # service type for control port service
      type: ClusterIP

      # annotations for control port service
      annotations: {}

    # Creates an ingress object in k8s. Will require an ingress-controller and
    # annotation to that ingress controller.
    ingress:
      # if enabled, creates an ingress resource for the gateway
      enabled: false

      # specify ingress controller class name
      className: ""

      # annotations for ingress
      annotations: {}

      # ingress rules
      hosts:
        - host: chart-example.local
          paths:
            - path: /
              pathType: ImplementationSpecific

      # tls configuration for ingress
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local
      tls: []


    # We usually recommend not to specify default resources and to leave this
    # as a conscious choice for the user. This also increases chances charts
    # run on environments with little resources, such as Minikube. If you do
    # want to specify resources, uncomment the following lines, adjust them
    # as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
    resources: {}

    # securityContext values for gateway pod
    securityContext:
      runAsUser: 1000
      fsGroup: 2000

    # node labels for gateway pod assignment
    nodeSelector: {}

    # tolerations for gateway pod assignment
    tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule

    # affinity for gateway pod assignment
    affinity: {}

    # extraEnvs is used to set gateway env variables
    # - name: TYK_GW_HTTPSERVEROPTIONS_SSLINSECURESKIPVERIFY
    #   value: "true"
    extraEnvs:
      - name: TYK_GW_SLAVEOPTIONS_RPCKEY
        valueFrom:
          secretKeyRef:
            name: secrets-tyk-data-plane
            key: orgID
      - name: TYK_GW_SLAVEOPTIONS_APIKEY
        valueFrom:
          secretKeyRef:
            name: secrets-tyk-data-plane
            key: apiKey
      - name: TYK_GW_SECRET
        valueFrom:
          secretKeyRef:
            name: secrets-tyk-data-plane
            key: APISecret
      - name: TYK_GW_SLAVEOPTIONS_GROUPID
        valueFrom:
          secretKeyRef:
            name: secrets-tyk-data-plane
            key: groupID
      - name: TYK_GW_SLAVEOPTIONS_CONNECTIONSTRING
        valueFrom:
          configMapKeyRef:
            name: config-tyk-data-plane
            key: rpcConnString
      - name: TYK_GW_SLAVEOPTIONS_USESSL
        valueFrom:
          configMapKeyRef:
            name: config-tyk-data-plane
            key: rpcUseSSL
      - name: TYK_GW_SLAVEOPTIONS_SSLINSECURESKIPVERIFY
        valueFrom:
          configMapKeyRef:
            name: config-tyk-data-plane
            key: rpcSslInsecureSkipVerify
    # used to mount files to the gateway containers
    #  - name: test
    #    filename: test.txt
    #    mountPath: /opt/test
    mounts: []



tyk-pump:
  ## Default values for tyk-pump chart.
  ## This is a YAML-formatted file.
  ## Declare variables to be passed into your templates.
  ## See Tyk Helm documentation for installation details:
  ## https://tyk.io/docs/tyk-oss/ce-helm-chart/
  ## Registry for all Tyk images - https://hub.docker.com/u/tykio

  # Overrides chart name. It is truncated to 63 characters.
  # Default value: tyk-pump.name
  nameOverride: ""

  # Overrides app name. IT is truncated to 63 characters.
  # Default value: tyk-pump.fullname
  fullnameOverride: ""

  global:
    secrets:
      # useSecretName can be used if you don't want to store plaintext secrets in the Helm value file and would
      # rather provide the k8s Secret externally.
      # Can set following fields in the secret:
      # - redisPass: Sets redis password
      # - redisSentinelPass: Set if you  are using Redis Sentinel. Used to set Redis password
      # - mongoURL: Sets mongo connection url
      # - pgConnectionString: Sets postgres connection details
      useSecretName: ""

    redis:
      # The addrs value will allow you to set your Redis addresses.
      #
      # If you are using Redis (e.g. Bitnami Redis at bitnami/redis) then enter single
      # endpoint. If using sentinel connection mode for Redis, please update the port number (typically 26379).
      #
      # If using a Redis Cluster (e.g. bitnami/redis-cluster), you can list
      # the endpoints of the redis instances or use the cluster configuration endpoint.
      #
      # Default value: redis.{{ .Release.Namespace }}.svc.cluster.local:6379
      # addrs:
      #   Example using tyk simple redis chart
      #   - redis.tyk.svc.cluster.local:6379
      #   Example using bitnami/redis
      #   - tyk-redis-master.tyk.svc.cluster.local:6379
      #   Example using bitnami/redis with sentinel
      #   - tyk-redis.tyk.svc.cluster.local:26379
      #   Example using bitnami/redis-cluster
      #   - tyk-redis-redis-cluster.tyk.svc.cluster.local:6379

      # Redis password
      # If you're using Bitnami Redis chart (e.g. bitnami/redis) please input
      # your password in the field below
      # pass: ""

      # Enables SSL for Redis connection. Redis instance will have to support that.
      # Default value: false
      # useSSL: true

      # If using "Redis Cluster" set enableCluster to true
      # (e.g. if using bitnami/redis-cluster)
      # enableCluster: true

      # Enables sentinel connection mode for Redis. If enabled, provide both
      # mandatory values for sentinelPass and masterName.
      # enableSentinel: false

      # Redis sentinel password, only required while enableSentinel is true.
      # For bitnami/redis the same password as Redis above
      # sentinelPass: ""

      # Redis sentinel master name, only required while enableSentinel is true.
      # For bitnami/redis typically redis-master
      # masterName: ""

      # By default the database index is 0. Setting the database index is not
      # supported with redis cluster. As such, if you have enableCluster: true,
      # then this value should be omitted or explicitly set to 0.
      storage:
        database: 0


  # If Mongo pump is in use, please set the connection details of MongoDB in the below field.
  mongo:
    # The mongoURL value will allow you to set your MongoDB address.
    # Default value: mongodb://mongo.{{ .Release.Namespace }}.svc.cluster.local:27017/tyk_analytics
    # mongoURL: mongodb://mongo.tyk.svc.cluster.local:27017/tyk_analytics
    # If your MongoDB has a password you can add the username and password to the url
    # mongoURL: mongodb://root:pass@tyk-mongo-mongodb.tyk.svc.cluster.local:27017/tyk_analytics?authSource=admin

    # Enables SSL for MongoDB connection. MongoDB instance will have to support that.
    # Default value: false
    useSSL: false

  # If postgres pump is in use, please set the connection details of Postgres in the below field.
  postgres:
    host: tyk-postgres-postgresql.tyk.svc.cluster.local
    port: 5432
    user: postgres
    password:
    database: tyk_analytics
    sslmode: disable

  # If pump is enabled the Gateway will create and collect analytics data to send
  # to a data store of your choice. These can be set up in the pump config. The
  # possible pump configs can be found here:
  # https://github.com/TykTechnologies/tyk-pump#configuration
  pump:
    # number for replicas for pump deployment
    replicaCount: 1

    image:
      # image repository for Tyk pump
      repository: docker.tyk.io/tyk-pump/tyk-pump

      # tag for Tyk pump
      tag: v1.7.0

      # image pull policy
      pullPolicy: IfNotPresent

    # backend defines the pumps to be created by default, as an array of string.
    # Supported backends are ["mongo", "postgres", "prometheus"]
    # If you would like to use other backends such as ElasticSearch, please
    # configure the backend via environment variables.
    # By default, Tyk Pump uses Prometheus.
    backend:
      - "prometheus"

    # uptimePumpBackend configures uptime Tyk Pump. ["", "mongo", "postgres"].
    # Set it to "" for disabling uptime Tyk Pump. By default, uptime pump is disabled.
    uptimePumpBackend: ""

    # prometheusPump configures Tyk Pump to expose Prometheus metrics.
    # Please add "prometheus" to .Values.pump.backend in order to enable Prometheus Pump.
    prometheusPump:
      # host represents the host without port, where Tyk Pump serve the metrics for Prometheus.
      host: ""
      # port represents the port where Tyk Pump serve the metrics for Prometheus.
      port: 9090
      # path represents the path to the Prometheus collection. For example /metrics.
      path: /metrics
      # customMetrics allows defining custom Prometheus metrics for Tyk Pump.
      # It accepts a string that represents a JSON object. For instance,
      #
      # customMetrics: '[{"name":"tyk_http_requests_total","description":"Total of API requests","metric_type":"counter","labels":["response_code","api_name"]}]'
      customMetrics: ""
      # If you are using prometheus Operator, set the fields in the section below.
      prometheusOperator:
        # enabled determines whether the Prometheus Operator is in use or not. By default,
        # it is disabled.
        # Tyk Pump can be monitored with PodMonitor Custom Resource of Prometheus Operator.
        # If enabled, PodMonitor resource is created based on .Values.pump.prometheusPump.prometheusOperator.podMonitorSelector
        # for Tyk Pump.
        enabled: false
        # podMonitorSelector represents a podMonitorSelector of your Prometheus resource. So that
        # your Prometheus resource can select PodMonitor objects based on selector defined here.
        # Please set this field to the podMonitorSelector field of your monitoring.coreos.com/v1
        # Prometheus resource's spec.
        #
        # You can check the podMonitorSelector via:
        #   kubectl describe prometheuses.monitoring.coreos.com <PROMETHEUS_POD>
        podMonitorSelector:
          release: prometheus-stack

    # annotations for pump deployment  
    annotations: {}

    # We usually recommend not to specify default resources and to leave this
    # as a conscious choice for the user. This also increases chances charts
    # run on environments with little resources, such as Minikube. If you do
    # want to specify resources, uncomment the following lines, adjust them
    # as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
    resources: {}

    # securityContext values for pump pod 
    securityContext:
      runAsUser: 1000
      fsGroup: 2000

    # node labels for pump pod assignment
    nodeSelector: {}

    # tolerations for pump pod assignment
    tolerations: []

    # affinity for pump pod assignment
    affinity: {}

    # extraEnvs is used to set environment variables in pump container
    # - name: TYK_PMP_PURGEDELAY
    #   value: 30
    extraEnvs: []

    ## extraVolumes is a list of volumes to be added to the pod
    ## extraVolumes:
    ##   - name: ca-certs
    ##     secret:
    ##       defaultMode: 420
    ##       secretName: ca-certs
    extraVolumes: []

    ## extraVolumeMounts is a list of volume mounts to be added to the pod
    ## extraVolumeMounts:
    ##   - name: ca-certs
    ##     mountPath: /etc/ssl/certs/ca-certs.crt
    ##     readOnly: true
    extraVolumeMounts: []

    # mounts can be used to mount files on pump container
    # - name: test
    #   filename: test.csv
    #   mountPath: /opt/test
    mounts: []
  